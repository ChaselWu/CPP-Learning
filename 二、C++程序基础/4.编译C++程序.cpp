//1.创建或修改源代码，储存到磁盘上――>源代码

//2.编译器将源代码预处理(预编译)后编译生成目标文件(.obj)，储存到磁盘――>机器码
/*
    1)Precompile:处理预编译指令（#），删除注释。(可能得到.i文件)


    2)compile

        编译器前端负责生成中间代码：
            2.1)扫描：源代码输入扫描器，进行简单的词法分析并将源代码的字符序列分割成一系列的记号。
            2.2)语法分析：进入语法分析器，对扫描器产生的记号进行语法分析，生成语法树。
            2.3)语义分析：进入语义分析器。
                {   复习：
                        编译器只能分析静态语义，不能分析动态语义。
                        动态语义错误是逻辑上的错误，例如死循环。
                        编译器能检查出例如括号找不到匹配等不合语法的静态错误。
                }

            2.4）源代码优化：生成中间代码

        编译器后端负责将中间代码转化为目标机器代码：
            2.5)代码生成：生成目标机器代码
            2.6)目标机器代码优化
*/


//{2.5.汇编――>二进制可重定位目标文件}


//3.链接器将目标文件与外加库链接为一个可执行文件(.exe)，储存到磁盘――>可执行代码
/*
    {
    一点也没看懂。。。。。。。反正有个符号重定位。
    }
*/