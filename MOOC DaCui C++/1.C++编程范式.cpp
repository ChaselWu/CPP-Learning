//1.about C++


//2.Classic C++ & Modern C++
/*
分界点：C++11
*/

//2.1.Language Evolution & Standards
/*
[]
*/


//3.Programming paradigm of C++
/*
编程范式：规范编程的一系列思想、方法以及程序设计语言构造块所构成的一种模式。
		（范即模范、典范；范式即模式、方法）是一类典型的编程风格，是从事软件工程的一类典型的风格。如：
	函数式编程、程序编程、面向对象、指令式编程。
		编程范型提供且决定了程序员对程序执行的看法。如面向对象中，程序被看作一系列相互作用的对象，函数
	式编程中，程序被看作一个无状态的函数计算序列。
		不同的编程语言提倡不同的“编程范型”。一些语言是专门为某个特定的范型设计的（Smalltalk&Java面向
	对象，Haskell&Scheme函数式编程，Ruby,Commonl Lisp,Python&Oz多种范型）。


	1）Structural Programming
		面向过程其实是最为实际的一种思考方式，是一种基础方法，它考虑的是实际地实现。一般的面向过程是从
	上到下步步求精，所以其核心是模块化的思想方法。因为其程序的流程很清楚，按照模块与函数的方法可以很好
	地组织，所以当程序规模不是很大时，它还会展现出一种优势。但是结构化编程的数据暴露在所有处理逻辑之下
	，这可能容易在大型程序中产生一些副作用。
		
	2) Object-Oriented Programming
		在面向对象编程中，数据和处理数据的逻辑（函数）被封装到特定的环境中，特定环境内的数据只能被这些
	环境内的函数访问，环境外的函数想要访问数据只能通过该环境提供的接口。该特定环境即被称作对象。因此面
	向对象使得开发和维护程序变得容易。
	
	3）Generic Programming泛型编程
		支持泛型编程的语言能在数据类型发生改变时自动处理多种类型的数据
	
	4)Functional Programming 函数式编程
		2011年后C++标准引入了Lambda表达式（函数式生成中的一个概念）。
		{Lambda演算}
		非FP语言的函数有副作用，FP语言的函数无副作用。
*/

//4.编程工具的选择

//5.集成开发环境的配置和安装